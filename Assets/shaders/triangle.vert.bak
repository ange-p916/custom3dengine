// triangle.vert
// Vertex Shader with MVP matrices for 3D camera.

#version 330 core

// Input vertex attributes
layout (location = 0) in vec3 aPos;   // Vertex position in model space
layout (location = 1) in vec3 aColor; // Vertex color

// Uniforms for transformation matrices
uniform mat4 model;       // Model matrix (object's position, rotation, scale in world)
uniform mat4 view;        // View matrix (camera's position and orientation)
uniform mat4 projection;  // Projection matrix (perspective, field of view)

// Output to fragment shader
out vec3 vertexColor;

void main()
{
    // Transform vertex position from model space to clip space:
    // gl_Position = projection * view * model * vec4(aPos, 1.0);
    // The 'uOffset' is now handled by the 'model' matrix.
    gl_Position = projection * view * model * vec4(aPos, 1.0);
    
    // Pass color through
    vertexColor = aColor;
}
